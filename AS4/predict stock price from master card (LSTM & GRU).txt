import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, GRU, Dense
from sklearn.metrics import mean_squared_error

# Load the data
data = pd.read_csv('/content/Mastercard_stock_history.csv')

data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)
data_values = data['Close'].values.reshape(-1, 1)

# Scale the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data_values)

# Function to create a dataset for time series forecasting
def create_dataset(dataset, time_step=1):
    dataX, dataY = [], []
    for i in range(len(dataset) - time_step - 1):
        a = dataset[i:(i + time_step), 0]
        dataX.append(a)
        dataY.append(dataset[i + time_step, 0])
    return np.array(dataX), np.array(dataY)

# Set the time step
time_step = 30

# Split the data into train and test sets
train_size = int(len(scaled_data) * 0.8)
test_size = len(scaled_data) - train_size
train_data, test_data = scaled_data[0:train_size, :], scaled_data[train_size:len(scaled_data), :]

X_train, y_train = create_dataset(train_data, time_step)
X_test, y_test = create_dataset(test_data, time_step)

# Reshape the data to fit LSTM and GRU input shape
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

# Build the LSTM model
lstm_model = Sequential()
lstm_model.add(LSTM(100, return_sequences=True, input_shape=(time_step, 1)))
lstm_model.add(LSTM(100, return_sequences=False))
lstm_model.add(Dense(1))
lstm_model.compile(optimizer='adam', loss='mean_squared_error')

# Build the GRU model
gru_model = Sequential()
gru_model.add(GRU(100, return_sequences=True, input_shape=(time_step, 1)))
gru_model.add(GRU(100, return_sequences=False))
gru_model.add(Dense(1))
gru_model.compile(optimizer='adam', loss='mean_squared_error')

# Train the LSTM model
lstm_model.fit(X_train, y_train, epochs=20, batch_size=64, validation_data=(X_test, y_test), verbose=1)

# Train the GRU model
gru_model.fit(X_train, y_train, epochs=20, batch_size=64, validation_data=(X_test, y_test), verbose=1)

# Make predictions
lstm_predict = lstm_model.predict(X_test)
gru_predict = gru_model.predict(X_test)

# Inverse transform the predictions to get actual values
lstm_predict = scaler.inverse_transform(lstm_predict)
gru_predict = scaler.inverse_transform(gru_predict)
y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))

# Calculate the mean squared error for both models
lstm_mse = mean_squared_error(y_test_actual, lstm_predict)
gru_mse = mean_squared_error(y_test_actual, gru_predict)

# Calculate the difference in MSE
mse_difference = lstm_mse - gru_mse

# Print the MSE for both models
print(f"LSTM Mean Squared Error: {lstm_mse}")
print(f"GRU Mean Squared Error: {gru_mse}")
print(f"Difference in MSE (LSTM - GRU): {mse_difference}")

# Plot the predictions along with the original data
plt.figure(figsize=(10, 6))
plt.plot(data.index[train_size + time_step + 1:], data_values[train_size + time_step + 1:], label='Original Data', color='blue')
plt.plot(data.index[train_size + time_step + 1:], lstm_predict[:, 0], label='LSTM Prediction', color='green')
plt.plot(data.index[train_size + time_step + 1:], gru_predict[:, 0], label='GRU Prediction', color='red')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.title('Mastercard Stock Price Prediction using LSTM and GRU')
plt.legend()
plt.show()

# Plot the difference in MSE
plt.figure(figsize=(10, 6))
plt.bar(['LSTM', 'GRU'], [lstm_mse, gru_mse], color=['blue', 'red'])
plt.ylabel('Mean Squared Error')
plt.title('Comparison of Mean Squared Error between LSTM and GRU Models')
plt.show()
