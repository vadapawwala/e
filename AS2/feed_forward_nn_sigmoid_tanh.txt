import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

# Load and preprocess the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# Sigmoid Activation Model
model = Sequential([
    Flatten(input_shape=(28, 28)),
    Dense(128, activation='sigmoid'),
    Dense(64, activation='sigmoid'),
    Dense(10, activation='softmax')
])
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])
model.fit(x_train, y_train, epochs=10, batch_size=32, validation_split=0.2)
test_loss, test_acc = model.evaluate(x_test, y_test)
print(f'Test accuracy with Sigmoid: {test_acc:.2f}')

# Tanh Activation Model
model_tanh = Sequential([
    Flatten(input_shape=(28, 28)),
    Dense(128, activation='tanh'),
    Dense(64, activation='tanh'),
    Dense(10, activation='softmax')
])
model_tanh.compile(optimizer='SGD',
                   loss='categorical_crossentropy',
                   metrics=['accuracy'])
model_tanh.fit(x_train, y_train, epochs=10, batch_size=32, validation_split=0.2)
test_loss_tanh, test_acc_tanh = model_tanh.evaluate(x_test, y_test)
print(f'Test accuracy with Tanh: {test_acc_tanh:.2f}')

#print(f"Input: {x_test[0]} Output: {predicted_output.round()}")
