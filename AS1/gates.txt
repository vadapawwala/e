import numpy as np

# Define the AND gate inputs and outputs
inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])  # Input features
outputs = np.array([0, 0, 0, 1])  # Expected outputs (AND gate)

# Initialize weights and bias
weights = np.random.rand(2)  # Random weights for two inputs
bias = np.random.rand(1)[0]  # Random bias
learning_rate = 0.1  # Learning rate

# Activation function (step function)
def step_function(x):
    return 1 if x >= 0 else 0

# Perceptron training
for epoch in range(100):  # Train for 100 epochs
    for i in range(len(inputs)):
        # Weighted sum
        weighted_sum = np.dot(inputs[i], weights) + bias
        # Predicted output
        prediction = step_function(weighted_sum)
        # Error calculation
        error = outputs[i] - prediction
        # Update weights and bias
        weights += learning_rate * error * inputs[i]
        bias += learning_rate * error

# Test the trained perceptron
print("Trained weights:", weights)
print("Trained bias:", bias)
print("\nTesting the AND Gate Perceptron:")
for i in range(len(inputs)):
    weighted_sum = np.dot(inputs[i], weights) + bias
    prediction = step_function(weighted_sum)
    print(f"Input: {inputs[i]}, Predicted Output: {prediction}")
