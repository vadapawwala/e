import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Conv2D, Activation, MaxPooling2D, Input

# Load and preprocess the image
def load_image(img_path, target_size=(128, 128)):
    img = image.load_img(img_path, target_size=target_size)
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)  # Expand dimensions to match the batch format
    img_array /= 255.0  # Normalize the image
    return img_array

# Visualize the output of each layer
def visualize_feature_maps(feature_maps, layer_names):
    for fmap, lname in zip(feature_maps, layer_names):
        fmap = np.squeeze(fmap)  # Remove single-dimensional entries from the shape
        num_filters = fmap.shape[-1]

        plt.figure(figsize=(15, 15))
        plt.suptitle(f'Feature maps of layer: {lname}', fontsize=16)

        # Plot each filter
        for i in range(num_filters):
            plt.subplot(8, 8, i+1)  # 8x8 grid for visualization
            plt.imshow(fmap[:, :, i], cmap='viridis')
            plt.axis('off')
        plt.show()

# Define a simple model with Conv2D, Activation, and Pooling layers
def create_simple_cnn(input_shape=(128, 128, 3)):
    input_img = Input(shape=input_shape)
    x = Conv2D(32, (3, 3), padding='same', name='conv_layer')(input_img)
    x = Activation('relu', name='activation_layer')(x)
    x = MaxPooling2D(pool_size=(2, 2), name='pooling_layer')(x)

    # Create a model
    model = Model(inputs=input_img, outputs=x)
    return model

# Main function to apply the layers and visualize outputs
def apply_and_visualize_layers(image_path):
    # Load the image
    img_array = load_image(image_path)

    # Create the model
    model = create_simple_cnn()

    # Create intermediate models for each layer
    layer_outputs = [layer.output for layer in model.layers]  # Extract the output of each layer
    activation_model = Model(inputs=model.input, outputs=layer_outputs)  # Create a model that returns outputs of each layer

    # Get the feature maps for the image
    feature_maps = activation_model.predict(img_array)

    # Layer names for visualization
    layer_names = [layer.name for layer in model.layers]

    # Visualize feature maps
    visualize_feature_maps(feature_maps, layer_names)

# Example usage
image_path = '/content/8e5f6fb04f319020b524944471ce27f8.jpg'  # Path to the .jpeg image
apply_and_visualize_layers(image_path)
